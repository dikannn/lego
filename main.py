import random
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
import datetime

from config import *

# –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–µ—Å—Ç –¥–ª—è –ø–∞–Ω–¥—ã
LOCATIONS = [
    (TREE_EMOJI, "tree"),
    (BUSH_EMOJI, "bush"),
    (ROCK_EMOJI, "rock")
]

def print_with_timestamp(message):
    current_time = datetime.datetime.now().strftime("%H:%M:%S")
    print(f"[{current_time}] {message}")

def get_main_keyboard():
    keyboard = [
        [KeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å"), KeyboardButton(f"{INFO_EMOJI} –û –±–æ—Ç–µ")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def start(update: Update, context: CallbackContext):
    reply_markup = get_main_keyboard()
    update.message.reply_text(WELCOME_MESSAGE, reply_markup=reply_markup)
    print_with_timestamp(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.first_name} –Ω–∞—á–∞–ª –∏–≥—Ä—É")

def play_game(update: Update, context: CallbackContext):
    keyboard = [
        [KeyboardButton(f"{HORSE_EMOJI} –ù–∞–π–¥–∏—Ç–µ –±–∞–Ω–∞–Ω"), KeyboardButton("‚ü∏ –ù–∞–∑–∞–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    update.message.reply_text(CHOOSE_GAME_MESSAGE, reply_markup=reply_markup)
    print_with_timestamp(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.first_name} –≤—ã–±—Ä–∞–ª –∏–≥—Ä—É")

def about_bot(update: Update, context: CallbackContext):
    reply_markup = get_main_keyboard()
    update.message.reply_text(ABOUT_BOT_MESSAGE, reply_markup=reply_markup)
    print_with_timestamp(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.first_name} –æ—Ç–∫—Ä—ã–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ")

def find_panda(update: Update, context: CallbackContext):
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –ø–∞–Ω–¥—ã
    correct_location = random.choice(LOCATIONS)
    context.user_data['correct_location'] = correct_location

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ª–æ–∫–∞—Ü–∏—è–º–∏ –≤ –æ–¥–∏–Ω —Ä—è–¥
    keyboard = [
        [KeyboardButton(emoji) for emoji, _ in LOCATIONS]
    ]
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    update.message.reply_text(FIND_HORSE_MESSAGE, reply_markup=reply_markup)
    print_with_timestamp(f"–ë–∞–Ω–∞–Ω —Å–ø—Ä—è—Ç–∞–ª—Å—è –∑–∞ {correct_location[0]}")

def handle_message(update: Update, context: CallbackContext):
    message_text = update.message.text
    
    if message_text == "üéÆ –ò–≥—Ä–∞—Ç—å":
        play_game(update, context)
        return
        
    if message_text == f"{INFO_EMOJI} –û –±–æ—Ç–µ":
        about_bot(update, context)
        return
        
    if message_text == f"{HORSE_EMOJI} –ù–∞–π–¥–∏—Ç–µ –±–∞–Ω–∞–Ω":
        find_panda(update, context)
        return

    if message_text == "‚ü∏ –ù–∞–∑–∞–¥":
        reply_markup = get_main_keyboard()
        update.message.reply_text(WELCOME_MESSAGE, reply_markup=reply_markup)
        print_with_timestamp(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.first_name} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        return
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –ª–æ–∫–∞—Ü–∏–∏
    for emoji, location in LOCATIONS:
        if message_text == emoji:
            correct_location = context.user_data.get('correct_location')
            if not correct_location:
                return
                
            if (emoji, location) == correct_location:
                update.message.reply_text(HORSE_FOUND_MESSAGE, reply_markup=get_main_keyboard())
                print_with_timestamp(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.first_name} –Ω–∞—à—ë–ª –±–∞–Ω–∞–Ω!")
            else:
                update.message.reply_text(f"{HORSE_NOT_FOUND_MESSAGE} {correct_location[0]}", 
                                        reply_markup=get_main_keyboard())
                print_with_timestamp(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.first_name} –Ω–µ –Ω–∞—à—ë–ª –±–∞–Ω–∞–Ω")
            return

def main():
    print_with_timestamp("–ó–∞–ø—É—Å–∫ Banana –±–æ—Ç–∞...")
    print_with_timestamp("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API...")
    
    # –°–æ–∑–¥–∞–µ–º updater —Å —Ç–æ–∫–µ–Ω–æ–º
    updater = Updater(token=BOT_TOKEN, use_context=True)
    print_with_timestamp("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")

    # –ü–æ–ª—É—á–∞–µ–º dispatcher –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dp = updater.dispatcher

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

    print_with_timestamp("–ë–æ—Ç Banana —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print_with_timestamp("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    print("-" * 50)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main() 